@page "/auth/register"
@layout AuthLayout
@using Planner.Shared.Models

@inject AuthenticationService authService;
@inject NavigationManager navigationManager;

<div class="col-12">
    <h3>Create a new Account</h3>
    <EditForm Model="model" OnValidSubmit="RegisterUser">        
        <RadzenCard>
            @if(!string.IsNullOrWhiteSpace(message))
            {
                <div class="alert alert-info">@message</div>
            }
            <DataAnnotationsValidator />
            <ValidationSummary />
            <label>First Name</label>
            <RadzenTextBox @bind-Value="model.FirstName"></RadzenTextBox>

            <label>Last Name</label>
            <RadzenTextBox @bind-Value="model.LastName"></RadzenTextBox>

            <label>Email</label>
            <RadzenTextBox @bind-Value="model.Email"></RadzenTextBox>

            <label>Password</label>
            <RadzenPassword @bind-Value="model.Password"></RadzenPassword>

            <label>confirm Password</label>
            <RadzenPassword @bind-Value="model.ConfirmPassword"></RadzenPassword>
            <hr />
            <RadzenButton ButtonType="Radzen.ButtonType.Submit" Text="Register"
                          ButtonStyle="Radzen.ButtonStyle.Primary" class="btn-block mr-2" Disabled="isBusy" />
            <RadzenButton ButtonType="Radzen.ButtonType.Submit" Text="Login"
                          ButtonStyle="Radzen.ButtonStyle.Secondary" class="btn-block mr-2" Disabled="isBusy" />
        </RadzenCard>
    </EditForm>
</div>


@code {
    RegisterRequest model = new RegisterRequest();

    bool isBusy = false;
    string message = string.Empty;
    public async Task RegisterUser()
    {
        isBusy = true;
        var result = await authService.RegisterUserAsync(model);
        if (result.IsSuccess)
        {
            message = result.Message;
        }
        else
        {
            message = result.Message;
        }
        isBusy = false;
    }
}
